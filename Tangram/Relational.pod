=head1 NAME

Tangram::Relational - Orthogonal Object Persistence in Relational Databases

=head1 SYNOPSIS

   use Tangram;
   
   $storage = Tangram::Relational->connect( $schema,
      $data_source, $username, $password );

   # save and load objects

   $storage->disconnect();

=head1 DESCRIPTION

This is the entry point in the object-relational persistence
backend. More backends will be added in the future; they will
implement persistence in XML documents, pure object databases etc.

=head1 CLASS METHODS

=head2 connect

   $storage = Tangram::Relational->connect( $schema,
      $data_source, $user, $password, \%options )

Connects to a storage and return a handle object. Dies in case of
failure.

$schema is an L<Tangram::Schema> object describing the system of
classes stored in the database.

$data_source, $user and $password are passed directly to
DBI::connect().

\%options is a reference to a hash containing connection options. See
L<Tangram::Storage> for a description of available options.

This method tries to pick the most appropriate backend by examining
the DBI connect string. First it tries to load (via the C<use>
directive) the module C<Tangram::DRIVER>, where C<DRIVER> is the
driver part of the DBI connect string. Then it checks whether that
module implements its own connect() method. If it does, it is called
with the same argument list. The object returned by the specialized
connect() method is an instance of a subclass of
C<Tangram::Storage> that uses vendor-specific features to add
functionality and/or improve performance.

If the C<Tangram::DRIVER> module fails to load (probably because it
doesn't exist), C<Tangram::Storage::connect()> is called with the
original argument list. Vanilla C<Tangram::Storage> assumes that the
database understands standard SQL constructs and that the DBD driver
implements the DBI specification fully and correctly.


