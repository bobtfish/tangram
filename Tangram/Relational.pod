=head1 NAME

Tangram::Relational - Orthogonal Object Persistence in Relational Databases

=head1 SYNOPSIS

   use Tangram;

   $schema = Tangram::Relational->schema( $hashref );

   $schema->deploy( $dbh );
      
   $storage = Tangram::Relational->connect( $schema,
      $data_source, $username, $password );

   $storage->disconnect();

   $schema->retreat( $dbh );

=head1 DESCRIPTION

This is the entry point in the object-relational persistence
backend. More backends will be added in the future; they will
implement persistence in XML documents, pure object databases etc.

=head1 CLASS METHODS

=head2 schema

   $schema = Tangram::Relational->schema( $hashref );

Returns a new Schema object. See L<Tangram::Schema>. 

=head2 deploy( HANDLE )

Writes SQL statements to HANDLE. The SQL code prepares a database for
use with this Schema, and consists mostly in a series of CREATE TABLE
instructions.

HANDLE may be a DBI connection handle, a file handle or undef (in
which case the SQL code is sent to STDOUT).

The SQL code is only guaranteed to work against an empty database.

=head2 connect

   $storage = Tangram::Relational->connect( $schema,
      $data_source, $user, $password, \%options )

Connects to a storage and return a handle object. Dies in case of
failure.

$schema is a Schema object describing the system of
classes stored in the database.

$data_source, $user and $password are passed directly to
DBI::connect().

\%options is a reference to a hash containing connection options. See
L<Tangram::Storage> for a description of available options.

=head2 retreat( HANDLE )

Writes SQL statements to HANDLE. The SQL code removes whatever was set
up by deploy().

HANDLE may be a DBI connection handle, a file handle or undef (in
which case the SQL code is sent to STDOUT).

The SQL code is only guaranteed to work against a database that was
deployed using exactly the same schema.


